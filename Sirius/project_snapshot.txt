--- START OF FILE src/pages/DyNotesViewer.jsx ---
import React, { useEffect, useState, useCallback } from 'react';
import Toolbar from '../assets/components/Toolbar';
import Navbar from '../assets/components/Navbar';
import { useNavigate, useParams } from 'react-router';
import { ArrowLeft } from 'lucide-react';
import { initializeApp } from 'firebase/app';
import { firebaseConfig } from '../config';
import Cookies from 'js-cookie';
import { getDynamicNotes, getData, setData, getCourses } from '../api';
import { Button, CircularProgress, Box, Typography } from '@mui/material';

import LessonListScreen from './widgets/dynotes/LessonList';
import LessonContentScreen from './widgets/dynotes/LessonScreen';
import QuestionSessionScreen from './widgets/dynotes/QuestionScreen';
import LessonCompleteScreen from './widgets/dynotes/GameOverScreen';

const DyNotesViewer = () => {
  const navigate = useNavigate();
  const { courseId, gradeId } = useParams();
  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);
  const app = initializeApp(firebaseConfig);

  const [userdata, setUserdata] = useState(null);
  const [dynamicNoteData, setDynamicNoteData] = useState(null);
  const [allCourses, setAllCourses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  // Screen and state management
  const [currentScreen, setCurrentScreen] = useState('lessonList');
  
  const [activeLessonIndex, setActiveLessonIndex] = useState(null);
  const [activeTopicIndex, setActiveTopicIndex] = useState(null);
  const [currentContentIndex, setCurrentContentIndex] = useState(0); // Index for content block within a topic

  // Derived state for active lesson and topic data
  const activeLessonData = activeLessonIndex !== null && dynamicNoteData ? dynamicNoteData.notes[activeLessonIndex] : null;
  const activeTopicData = activeLessonData && activeTopicIndex !== null ? activeLessonData.topics[activeTopicIndex] : null;
  const activeContentBlock = activeTopicData && activeTopicData.content ? activeTopicData.content[currentContentIndex] : null;

  const [isNextButtonActive, setIsNextButtonActive] = useState(false); // For enabling "Next Content / Start Quiz" button

  const [questionsForActiveTopic, setQuestionsForActiveTopic] = useState([]);
  
  const [topicStats, setTopicStats] = useState({ score: 0, totalQuestions: 0, timeTaken: 0, xpEarned: 0, accuracy: 0 });
  const [topicStartTime, setTopicStartTime] = useState(null);

  useEffect(() => {
    const handleResize = () => setIsMobile(window.innerWidth < 768);
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  useEffect(() => {
    const userCookie = Cookies.get("user");
    if (!userCookie) {
      navigate('/login');
      return;
    }
    setUserdata(JSON.parse(userCookie));

    const fetchData = async () => {
      setLoading(true);
      setError('');
      try {
        const [notesData, coursesList] = await Promise.all([
          getDynamicNotes(app, courseId, gradeId),
          getCourses(app)
        ]);

        if (notesData && notesData.notes && notesData.notes.length > 0) {
          setDynamicNoteData(notesData);
        } else {
          setError('Dynamic notes not found or are empty for this course.');
        }
        setAllCourses(coursesList || []);
      } catch (err) {
        console.error("Error fetching dynamic notes data:", err);
        setError('Failed to load dynamic notes. Please try again.');
      }
      setLoading(false);
    };

    fetchData();
  }, [app, courseId, gradeId, navigate]);

  // --- Navigation and State Logic ---

  const handleSelectTopic = (lessonIdx, topicIdx) => {
    setActiveLessonIndex(lessonIdx);
    setActiveTopicIndex(topicIdx);
    setCurrentContentIndex(0); // Start from the first content block of the topic
    setCurrentScreen('lessonContent');
    setIsNextButtonActive(false); 
    setTimeout(() => setIsNextButtonActive(true), 3000); // Reading time for the first content block
  };
  
  const handleNextContentOrQuiz = () => {
    if (!activeTopicData || !activeTopicData.content) return;

    if (currentContentIndex < activeTopicData.content.length - 1) {
      // More content blocks in the current topic
      setCurrentContentIndex(prev => prev + 1);
      setIsNextButtonActive(false);
      setTimeout(() => setIsNextButtonActive(true), 3000); // Reading time for next content block
    } else {
      // All content blocks for the topic are viewed, proceed to quiz or completion
      let currentTopicQuestions = [];
      if (activeTopicData.questions && activeTopicData.questions.length > 0) {
          currentTopicQuestions = activeTopicData.questions.map(q => ({
              ...q, 
              lessonName: activeLessonData?.name, 
              topicName: activeTopicData.name 
          }));
      }

      if (currentTopicQuestions.length > 0) {
        setQuestionsForActiveTopic(shuffleArray(currentTopicQuestions)); 
        setTopicStartTime(Date.now()); // Start timer for quiz
        setCurrentScreen('questionSession');
      } else {
        // No questions, topic complete
        const timeTaken = topicStartTime ? Math.floor((Date.now() - topicStartTime) / 1000) : (activeTopicData.content.length * 30); // Estimate time if no quiz
        setTopicStats({ score: 0, totalQuestions: 0, timeTaken, xpEarned: 5 * (activeTopicData.content.length || 1), accuracy: 100 }); // XP for reading
        setCurrentScreen('lessonComplete');
      }
    }
  };

  const handleQuizComplete = (finalScore, numQuestions) => {
    const timeTaken = topicStartTime ? Math.floor((Date.now() - topicStartTime) / 1000) : 0;
    const accuracy = numQuestions > 0 ? (finalScore / numQuestions) * 100 : 0;
    let xp = (activeTopicData?.content?.length || 1) * 2; // Base XP for content read
    xp += Math.floor(accuracy / 10); // Accuracy bonus
    if (timeTaken < 180 && numQuestions > 0) xp += Math.max(0, 3 - Math.floor(timeTaken/60)); // Time bonus
    if (numQuestions === 0) xp = (activeTopicData?.content?.length || 1) * 5; // XP for just reading if no questions
    
    setTopicStats({ score: finalScore, totalQuestions: numQuestions, timeTaken, xpEarned: xp, accuracy: parseFloat(accuracy.toFixed(1)) });
    setCurrentScreen('lessonComplete');
  };

  const handleTopicCompleteNext = async () => {
    if (userdata && courseId && gradeId && topicStats.xpEarned > 0) {
      try {
        const courseKey = `${courseId}_${gradeId}`;
        let currentXpData = await getData(app, userdata.uid, "xp", "{}");
        let currentXp = JSON.parse(currentXpData);
        currentXp[courseKey] = (currentXp[courseKey] || 0) + topicStats.xpEarned;
        await setData(app, userdata.uid, "xp", JSON.stringify(currentXp));
        console.log(`XP ${topicStats.xpEarned} added for ${courseKey}`);
      } catch (e) {
        console.error("Failed to save XP:", e);
      }
    }
    setCurrentScreen('lessonList'); 
    setActiveLessonIndex(null);
    setActiveTopicIndex(null);
    setCurrentContentIndex(0);
    setQuestionsForActiveTopic([]);
    setTopicStartTime(null);
  };
  
  const shuffleArray = (array) => {
    const newArray = [...array];
    for (let i = newArray.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
    }
    return newArray;
  };

  const handleBackNavigation = () => {
    if (currentScreen === 'lessonContent') {
        if (currentContentIndex > 0) {
            setCurrentContentIndex(prev => prev -1);
            setIsNextButtonActive(true); // Assume can go next immediately when going back
        } else {
            setCurrentScreen('lessonList');
            setActiveLessonIndex(null);
            setActiveTopicIndex(null);
        }
    } else if (currentScreen === 'questionSession' || currentScreen === 'lessonComplete') {
        setCurrentScreen('lessonList'); // Or back to 'lessonContent' for the last content block? For now, list.
        setActiveLessonIndex(null);
        setActiveTopicIndex(null);
        setCurrentContentIndex(0);
        setQuestionsForActiveTopic([]);
    } else if (currentScreen === 'lessonList') {
        navigate('/notes');
    }
  };

  // --- Rendering Logic ---
  const renderCurrentScreen = () => {
    if (loading) return <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '200px' }}><CircularProgress color="inherit" /></Box>;
    if (error) return <Typography color="error" sx={{ textAlign: 'center', my: 2, color: 'white' }}>{error}</Typography>;
    if (!dynamicNoteData) return <Typography sx={{ textAlign: 'center', my: 2, color: 'white' }}>No dynamic notes data available.</Typography>;

    switch (currentScreen) {
      case 'lessonList':
        return <LessonListScreen lessons={dynamicNoteData.notes || []} onSelectTopic={handleSelectTopic} />;
      case 'lessonContent':
        if (!activeTopicData || !activeContentBlock) {
          return <Typography sx={{color: 'white'}}>Error: Topic or content data not found.</Typography>;
        }
        return (
          <LessonContentScreen 
            contentBlock={activeContentBlock}
            topicName={activeTopicData.name}
            onNextContentOrQuiz={handleNextContentOrQuiz}
            isNextActive={isNextButtonActive}
            contentProgress={((currentContentIndex + 1) / (activeTopicData.content?.length || 1)) * 100}
            isLastContent={currentContentIndex === (activeTopicData.content?.length || 0) - 1}
            hasQuestions={activeTopicData.questions && activeTopicData.questions.length > 0}
          />
        );
      case 'questionSession':
        return (
          <QuestionSessionScreen
            questions={questionsForActiveTopic}
            onQuizComplete={handleQuizComplete}
          />
        );
      case 'lessonComplete':
        return (
          <LessonCompleteScreen
            xpEarned={topicStats.xpEarned}
            accuracy={topicStats.accuracy}
            timeTakenInSeconds={topicStats.timeTaken}
            onNextClick={handleTopicCompleteNext}
            itemName={activeTopicData?.name || "Topic"}
          />
        );
      default:
        return <Typography sx={{color: 'white'}}>Unknown screen state.</Typography>;
    }
  };

  const getHeaderTitle = () => {
    if (!dynamicNoteData || !allCourses.length) return "Dynamic Notes";
    const courseInfo = allCourses.find(c => c.id === courseId && c.grade === gradeId);
    const courseName = courseInfo ? courseInfo.name : "Course";

    if (currentScreen === 'lessonList') return courseName;
    
    const lessonName = activeLessonData?.name || "Lesson";
    const topicName = activeTopicData?.name || `Topic ${activeTopicIndex !== null ? activeTopicIndex + 1 : ''}`;

    if (currentScreen === 'lessonContent') {
        const contentBlockName = activeContentBlock?.name || `Content ${currentContentIndex + 1}`;
        return `${topicName} - ${contentBlockName}`;
    }
    if (currentScreen === 'questionSession') {
      return `${topicName} - Quiz`;
    }
    if (currentScreen === 'lessonComplete') {
      return `${topicName} - Results`;
    }
    return "Dynamic Notes";
  };
  
  const buttonIconSize = isMobile ? 24 : 28;
  const backButtonWidth = `${buttonIconSize + 16}px`; 

  return (
    <div className='bg-cover h-screen flex bg-[url(/src/assets/background.jpg)]'>
      <div className='flex h-full w-full md:flex-row'>
        {!isMobile && <Toolbar current={'notes'} />}
        <div className='flex-grow h-full md:h-fit md:my-auto flex items-center justify-center w-full'>
          <div className='mx-auto h-full w-full max-w-md md:rounded-xl md:backdrop-blur-md overflow-hidden shadow-lg bg-[#0005]'>
            <div className="text-white font-semibold font-sans flex h-20 items-center justify-between px-4 w-full text-xl md:text-2xl">
              <button
                onClick={handleBackNavigation}
                className="p-2 rounded-full hover:bg-white/10 active:bg-white/20 transition-colors focus:outline-none"
                aria-label="Go back"
              >
                <ArrowLeft size={buttonIconSize} strokeWidth={2.5} />
              </button>
              <span className="text-center flex-grow mx-2 truncate">
                {getHeaderTitle()}
              </span>
              <div style={{ width: backButtonWidth, flexShrink: 0 }}></div>
            </div>
            <div className="overflow-y-auto pb-5 md:max-h-150 max-h-[calc(100%-5rem)] no-scrollbar px-2 md:px-4">
              {renderCurrentScreen()}
            </div>
          </div>
        </div>
        {isMobile && <div className='md:hidden fixed bottom-0 left-0 w-full'><Navbar current={'notes'} /></div>}
      </div>
    </div>
  );
};

export default DyNotesViewer;
--- END OF FILE src/pages/DyNotesViewer.jsx ---
--- START OF FILE src/pages/widgets/dynotes/LessonScreen.jsx ---
import React from 'react';
import DynamicColorProgressBar from './DynamicColorProgressBar';
import { Button, Typography } from '@mui/material';
import { MathJax, MathJaxContext } from 'better-react-mathjax';

const LessonScreen = ({ 
    contentBlock,
    topicName,
    onNextContentOrQuiz, 
    isNextActive, 
    contentProgress,
    isLastContent,
    hasQuestions
}) => {
  if (!contentBlock) {
    return <div className="text-center text-white/70 p-4">Loading content...</div>;
  }

  const mathJaxConfig = {
    loader: { load: ["input/tex", "output/svg"] },
    tex: {
      inlineMath: [['$', '$'], ['\\(', '\\)']],
      displayMath: [['$$', '$$'], ['\\[', '\\]']],
      processEscapes: true,
    },
    svg: { fontCache: 'global' }
  };
  
  const buttonText = isLastContent 
    ? (hasQuestions ? "Start Quiz" : "Finish Topic")
    : "Next Content";

  return (
    <div className='flex flex-col gap-5 p-2'>
      <div className="mb-3">
          <Typography variant="caption" sx={{color: 'rgba(255,255,255,0.7)', display: 'block', textAlign: 'center', mb: 0.5}}>
              {topicName || 'Topic'} Progress
          </Typography>
          <DynamicColorProgressBar value={contentProgress || 0} />
      </div>
      
      <div className='flex flex-col gap-3'>
        {(topicName && contentProgress <= (1 / (contentBlock?.parentLength || 1) * 100) ) &&  // Show topic name only for the first content block
          <h2 className="text-xl font-semibold text-white mb-1">{topicName}</h2>
        }
        <MathJaxContext config={mathJaxConfig}>
          <div className='bg-[#0005] p-3 rounded-md text-white/90 text-justify'>
            {contentBlock.name && <h3 className="text-md font-semibold mb-1">{contentBlock.name}</h3>}
            {contentBlock.text && <p className="mb-2 whitespace-pre-wrap">{contentBlock.text}</p>}
            {contentBlock.mathjax && <MathJax>{contentBlock.mathjax}</MathJax>}
          </div>
        </MathJaxContext>
        <div className='flex-col w-full flex items-end mt-3'>
          <Button 
            variant='contained' 
            onClick={onNextContentOrQuiz} 
            disabled={!isNextActive}
            sx={{ 
              backgroundColor: isNextActive ? '#4caf50' : '#555', 
              '&:hover': {
                backgroundColor: isNextActive ? '#388e3c' : '#555',
              },
              color: 'white'
            }}
          >
            {buttonText}
          </Button>
        </div>
      </div>
    </div>
  );
};

export default LessonScreen;
--- END OF FILE src/pages/widgets/dynotes/LessonScreen.jsx ---