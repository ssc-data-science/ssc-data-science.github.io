Okay, here's a prompt designed to guide an LLM to create a similar JSON structure from any given set of notes and a syllabus.

```text
You are an expert curriculum developer and AI tutor. Your task is to transform provided raw notes and a syllabus into a structured JSON format suitable for a dynamic learning tool. The goal is to create comprehensive learning modules with detailed content breakdowns and associated assessment questions.

**Input You Will Receive:**

1.  **`<SYLLABUS_STRUCTURE>`:** This will outline the main modules and their sub-topics.
2.  **`<NOTES_CONTENT>`:** This will be the raw text, images, or other content from the notes that needs to be processed and structured.

**Output JSON Structure Requirements:**

The output must be a single JSON array `[]`. Each element in this array will be an object representing a "Module" as defined by the syllabus.

Each **Module Object** should have the following structure:
```json
{
  "name": "Module Name from Syllabus",
  "topics": [
    // Array of Topic Objects
  ],
  "questions": [] // Optional: For module-level questions, usually empty for now.
}
```

Each **Topic Object** (within the `topics` array of a Module) should have:
```json
{
  "name": "Topic Name from Syllabus or logical grouping from notes",
  "content": [
    // Array of Content Item Objects
  ],
  "questions": [
    // Array of Question Objects for this Topic
  ]
}
```

Each **Content Item Object** (within the `content` array of a Topic) should have:
```json
{
  "name": "Concise name for this specific piece of information/concept",
  "text": "The detailed information for this concept, summarized comprehensively from the notes. Ensure accuracy and avoid losing critical information.",
  "mathjax": "LaTeX string for any mathematical formulas, or null if none."
}
```

Each **Question Object** (within the `questions` array of a Topic) should have:
```json
{
  "question": "A clear question testing understanding of the content within this Topic.",
  "options": [
    "Option A",
    "Option B",
    "Option C",
    "Option D" // Aim for 3-4 distinct options
  ],
  "correct": 0 // 0-indexed integer indicating the correct option
}
```

**Key Instructions:**

1.  **Syllabus Adherence:**
    *   The top-level objects in the JSON array correspond to the main modules in the `<SYLLABUS_STRUCTURE>`. Their `name` field must match the syllabus module name.
    *   The `name` field of each `Topic Object` should primarily come from the sub-topics listed under a module in the `<SYLLABUS_STRUCTURE>`. If the syllabus is high-level, you may need to infer logical topic groupings from the `<NOTES_CONTENT>` that fit under a syllabus module.

2.  **Content Granularity:**
    *   For each `Topic`, break down the relevant information from `<NOTES_CONTENT>` into multiple, smaller, digestible `Content Item Objects`.
    *   Each `Content Item` should represent a distinct concept, definition, example, or piece of information.
    *   The `name` for each `Content Item` should be a short, descriptive heading for that specific piece of text.
    *   The `text` field should be a comprehensive yet concise summary of the information from the notes. Do not simply copy-paste large chunks; rephrase and summarize to ensure clarity and focus.

3.  **Question Generation:**
    *   For each `Topic Object`, generate 2-4 relevant multiple-choice questions.
    *   These questions must *only* test the material covered in the `content` array of *that specific Topic*.
    *   Ensure options are plausible but distinct, with one clearly correct answer based on the provided `text` within the topic's content items.
    *   The `correct` field must be the 0-indexed integer of the correct option.

4.  **Accuracy and Completeness:**
    *   Ensure all significant information from the `<NOTES_CONTENT>` relevant to a syllabus point is captured.
    *   Be accurate in the information presented and in the correct answers to questions.
    *   Do not introduce information not present in the `<NOTES_CONTENT>`.

5.  **Formatting:**
    *   Strictly adhere to the JSON structure outlined above.
    *   Pay close attention to commas, brackets, and braces.
    *   If notes contain mathematical formulas, represent them in LaTeX format within the `mathjax` field. If no formulas, `mathjax` should be `null`.

**Process:**

1.  Carefully read the `<SYLLABUS_STRUCTURE>`.
2.  For each module and topic in the syllabus, locate the corresponding information in the `<NOTES_CONTENT>`.
3.  Break down the information for each topic into granular `Content Item Objects`.
4.  Write clear `text` and descriptive `name` for each `Content Item`.
5.  Generate relevant `questions` for each `Topic`.
6.  Assemble the entire output into the specified JSON format.

**Example Placeholder for Your Input:**

Let's assume you will provide:

`<SYLLABUS_STRUCTURE>`:
```
Module 1: [Syllabus Module 1 Name]
  - Topic 1.1: [Syllabus Topic 1.1 Name]
  - Topic 1.2: [Syllabus Topic 1.2 Name]
Module 2: [Syllabus Module 2 Name]
  - Topic 2.1: [Syllabus Topic 2.1 Name]
```

`<NOTES_CONTENT>`:
```
[All the raw text and information from the user's notes will go here...]
```

Now, based on the syllabus and notes I will provide, please generate the JSON output.

---

**READY FOR INPUT.**

**Please provide the `<SYLLABUS_STRUCTURE>` first, then I will prompt you for the `<NOTES_CONTENT>` for each module/section, or you can provide it all at once if preferred.**
```

**How to use this prompt:**

1.  Give this entire prompt to the LLM.
2.  The LLM will likely say "READY FOR INPUT" or ask for the syllabus.
3.  Provide your syllabus, clearly marking it (e.g., "Here is the SYLLABUS_STRUCTURE: \n ... syllabus details ...").
4.  Provide your notes, clearly marking them (e.g., "Here is the NOTES_CONTENT: \n ... notes details ...").
    *   If your notes are very long, you might need to process them in chunks corresponding to syllabus modules, as LLMs have context window limits. You could say, "Let's start with Module 1. Here is the NOTES_CONTENT for Module 1: ..."
5.  The LLM should then generate the JSON.

This prompt is designed to be robust by clearly defining the input, output, structure, and specific instructions for each part of the generation process.